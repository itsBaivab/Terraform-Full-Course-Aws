name: 🤖 Create/Update Participant File
on:
  issues:
    types: [opened, labeled]

jobs:
  process-submission:
    if: contains(github.event.issue.labels.*.name, 'verified')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract submission data
        id: extract
        run: |
          # Parse issue body to extract form data
          ISSUE_BODY="${{ github.event.issue.body }}"

          # Extract GitHub username
          USERNAME="${{ github.event.issue.user.login }}"

          # Extract day number - improved extraction
          DAY_NUMBER=$(echo "$ISSUE_BODY" | sed -n '/### Day Number/,/###/p' | grep -v "###" | grep -v "^$" | head -1 | tr -d '\r\n ')

          # Extract challenge topic - improved extraction
          TOPIC=$(echo "$ISSUE_BODY" | sed -n '/### Challenge Topic/,/###/p' | grep -v "###" | grep -v "^$" | head -1 | tr -d '\r\n')

          # Extract blog URL - improved extraction
          BLOG_URL=$(echo "$ISSUE_BODY" | sed -n '/### Blog Post URL/,/###/p' | grep -v "###" | grep -v "^$" | head -1 | tr -d '\r\n ')

          # Extract social media URL - improved extraction
          SOCIAL_URL=$(echo "$ISSUE_BODY" | sed -n '/### Social Media Post URL/,/###/p' | grep -v "###" | grep -v "^$" | head -1 | tr -d '\r\n ')

          # Extract GitHub repo URL - improved extraction
          REPO_URL=$(echo "$ISSUE_BODY" | sed -n '/### Your Practice Repository/,/###/p' | grep -v "###" | grep -v "^$" | head -1 | tr -d '\r\n ')

          # Extract key learnings
          LEARNINGS=$(echo "$ISSUE_BODY" | sed -n '/Key Learnings/,/Completion Checklist/p' | head -n -1 | tail -n +2 | tr -d '\r')

          # Set outputs
          echo "username=$USERNAME" >> $GITHUB_OUTPUT
          echo "day_number=$DAY_NUMBER" >> $GITHUB_OUTPUT
          echo "topic=$TOPIC" >> $GITHUB_OUTPUT
          echo "blog_url=$BLOG_URL" >> $GITHUB_OUTPUT
          echo "social_url=$SOCIAL_URL" >> $GITHUB_OUTPUT
          echo "repo_url=$REPO_URL" >> $GITHUB_OUTPUT
          echo "learnings<<EOF" >> $GITHUB_OUTPUT
          echo "$LEARNINGS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create/Update participant file
        run: |
          USERNAME="${{ github.event.issue.user.login }}"
          DAY_NUMBER="${{ steps.extract.outputs.day_number }}"
          TOPIC="${{ steps.extract.outputs.topic }}"
          BLOG_URL="${{ steps.extract.outputs.blog_url }}"
          SOCIAL_URL="${{ steps.extract.outputs.social_url }}"
          REPO_URL="${{ steps.extract.outputs.repo_url }}"
          LEARNINGS="${{ steps.extract.outputs.learnings }}"

          # Use issue creation date (when participant actually completed the work)
          SUBMISSION_DATE=$(date -d "${{ github.event.issue.created_at }}" +%Y-%m-%d)
          # Current date is only used for leaderboard "Last Updated" timestamp
          CURRENT_DATE=$(date +%Y-%m-%d)

          # Create participants directory if it doesn't exist
          mkdir -p submissions/participants

          # Define file path
          FILE_PATH="submissions/participants/${USERNAME}.md"

          # Calculate streak based on issue creation dates
          CURRENT_STREAK=1
          if [ -f "$FILE_PATH" ]; then
            # Get the last submission date
            LAST_SUBMISSION=$(grep "Last Submission:" "$FILE_PATH" | sed 's/.*Last Submission:\*\* //' || echo "")
            CURRENT_STREAK_VALUE=$(grep "Current Streak:" "$FILE_PATH" | sed 's/.*Current Streak:\*\* //' | sed 's/ day.*//' || echo "1")
            
            if [ ! -z "$LAST_SUBMISSION" ]; then
              # Calculate days difference using submission dates
              LAST_DATE_EPOCH=$(date -d "$LAST_SUBMISSION" +%s 2>/dev/null || echo "0")
              SUBMISSION_DATE_EPOCH=$(date -d "$SUBMISSION_DATE" +%s)
              DAYS_DIFF=$(( (SUBMISSION_DATE_EPOCH - LAST_DATE_EPOCH) / 86400 ))
              
              if [ $DAYS_DIFF -eq 1 ]; then
                # Consecutive day - increment streak
                CURRENT_STREAK=$((CURRENT_STREAK_VALUE + 1))
              elif [ $DAYS_DIFF -gt 1 ]; then
                # Gap in submissions - reset streak
                CURRENT_STREAK=1
              else
                # Same day or future date - keep current streak
                CURRENT_STREAK=$CURRENT_STREAK_VALUE
              fi
            fi
          fi

          # Create file header if file doesn't exist
          if [ ! -f "$FILE_PATH" ]; then
            cat > "$FILE_PATH" << EOF
          # ${USERNAME} - 30 Days Terraform & AWS Challenge

          **Participant:** @${USERNAME}  
          **Start Date:** ${SUBMISSION_DATE}  
          **Challenge Repository:** [terraform-aws-30days](https://github.com/${{ github.repository }})  
          **Personal Practice Repo:** ${REPO_URL}

          ## Progress Overview
          - **Days Completed:** 1/30
          - **Current Streak:** ${CURRENT_STREAK} day$([ $CURRENT_STREAK -ne 1 ] && echo "s" || echo "")
          - **Last Submission:** ${SUBMISSION_DATE}

          ---

          EOF
          fi

          # Add new day entry with submission date
          cat >> "$FILE_PATH" << EOF
          ## Day ${DAY_NUMBER}: ${TOPIC}
          **Date:** ${SUBMISSION_DATE}  
          **Status:** ✅ Completed

          ### 📝 Blog Post
          [Day ${DAY_NUMBER} - ${TOPIC}](${BLOG_URL})

          ### 🔗 Links
          - **Social Media:** [Post](${SOCIAL_URL})
          - **Code Repository:** [GitHub](${REPO_URL})
          - **Issue:** [#${{ github.event.issue.number }}](${{ github.event.issue.html_url }})

          ### 🎯 Key Learnings
          ${LEARNINGS}

          ---

          EOF

          # Update progress overview with submission date
          TOTAL_DAYS=$(grep -c "## Day" "$FILE_PATH")
          sed -i "s/Days Completed.*$/Days Completed:** ${TOTAL_DAYS}\/30/" "$FILE_PATH"
          sed -i "s/Current Streak.*$/Current Streak:** ${CURRENT_STREAK} day$([ $CURRENT_STREAK -ne 1 ] && echo "s" || echo "")/" "$FILE_PATH"
          sed -i "s/Last Submission.*$/Last Submission:** ${SUBMISSION_DATE}/" "$FILE_PATH"

      - name: Update leaderboard
        run: |
          USERNAME="${{ github.event.issue.user.login }}"
          DAY_NUMBER="${{ steps.extract.outputs.day_number }}"
          # Current date is only used for "Last Updated" timestamp in leaderboard
          CURRENT_DATE=$(date +%Y-%m-%d)
          # Use issue creation date for activity status calculations (not verification date)
          ISSUE_DATE=$(date -d "${{ github.event.issue.created_at }}" +%Y-%m-%d)

          # Update or create leaderboard
          LEADERBOARD_FILE="submissions/leaderboard.md"

          # Create leaderboard header
          cat > "$LEADERBOARD_FILE" << EOF
          # 🏆 30 Days Terraform & AWS Challenge - Leaderboard

          **Last Updated:** ${CURRENT_DATE}

          > Participants ranked by days completed. Keep pushing to climb the leaderboard! 🚀

          | Rank | Participant | Days Completed | Current Streak | Latest Day | Last Submission | Status |
          |------|-------------|----------------|----------------|------------|-----------------|--------|
          EOF

          # Collect all participant data
          TEMP_DATA="/tmp/leaderboard_data.txt"
          > "$TEMP_DATA"

          # Process all participant files
          for participant_file in submissions/participants/*.md; do
            if [ -f "$participant_file" ]; then
              # Extract username from filename
              participant_username=$(basename "$participant_file" .md)
              
              # Count completed days
              completed_days=$(grep -c "## Day" "$participant_file" 2>/dev/null || echo "0")
              
              # Get current streak
              current_streak=$(grep "Current Streak:" "$participant_file" | sed 's/.*Current Streak:\*\* //' | sed 's/ day.*//' 2>/dev/null || echo "1")
              
              # Get last submission date
              last_submission=$(grep "Last Submission:" "$participant_file" | sed 's/.*Last Submission:\*\* //' 2>/dev/null || echo "$ISSUE_DATE")
              
              # Get latest day number (last completed day)
              latest_day=$(grep "## Day" "$participant_file" | tail -1 | sed 's/## Day \([0-9]*\):.*/\1/' 2>/dev/null || echo "1")
              
              # Determine status based on last submission compared to current submission date (not verification date)
              last_date_epoch=$(date -d "$last_submission" +%s 2>/dev/null || date -d "$ISSUE_DATE" +%s)
              issue_date_epoch=$(date -d "$ISSUE_DATE" +%s)
              days_since=$(( (issue_date_epoch - last_date_epoch) / 86400 ))
              
              if [ $days_since -le 1 ]; then
                status="🔥 Active"
              elif [ $days_since -le 3 ]; then
                status="⚡ Recent"
              else
                status="💤 Inactive"
              fi
              
              # Add to temp data (format: completed_days|username|streak|latest_day|last_submission|status)
              echo "${completed_days}|${participant_username}|${current_streak}|${latest_day}|${last_submission}|${status}" >> "$TEMP_DATA"
            fi
          done

          # Sort by completed days (descending) and add to leaderboard
          rank=1
          sort -nr -t'|' -k1 "$TEMP_DATA" | while IFS='|' read -r completed_days participant_username current_streak latest_day last_submission status; do
            # Determine rank emoji
            case $rank in
              1) rank_emoji="🥇" ;;
              2) rank_emoji="🥈" ;;
              3) rank_emoji="🥉" ;;
              *) rank_emoji="#${rank}" ;;
            esac
            
            # Add participant row with profile image
            echo "| ${rank_emoji} | ![${participant_username}](https://github.com/${participant_username}.png?size=32) [@${participant_username}](https://github.com/${participant_username}) | ${completed_days}/30 | ${current_streak} day$([ $current_streak -ne 1 ] && echo "s" || echo "") | Day ${latest_day} | ${last_submission} | ${status} |" >> "$LEADERBOARD_FILE"
            
            rank=$((rank + 1))
          done

          # Add footer with statistics
          cat >> "$LEADERBOARD_FILE" << EOF

          ---

          ## 📊 Challenge Statistics

          - **Total Participants:** $(ls submissions/participants/*.md 2>/dev/null | wc -l)
          - **Total Submissions:** $(find submissions/participants -name "*.md" -exec grep -c "## Day" {} \; 2>/dev/null | paste -sd+ | bc || echo "0")
          - **Average Completion:** $(find submissions/participants -name "*.md" -exec grep -c "## Day" {} \; 2>/dev/null | awk '{sum += \$1; count++} END {if(count > 0) printf "%.1f", sum/count; else print "0"}') days per participant
          - **Last Updated:** ${CURRENT_DATE}

          > 🎯 **Goal:** Complete all 30 days to master Terraform & AWS!  
          > � **Tip:** Consistency is key - try to submit daily to maintain your streak!

          EOF

          # Clean up temp file
          rm -f "$TEMP_DATA"

      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action Bot"
          git add submissions/
          git commit -m "📝 Add Day ${{ steps.extract.outputs.day_number }} submission for @${{ steps.extract.outputs.username }} (#${{ github.event.issue.number }})"
          git push

      - name: Add verification label and comment
        uses: actions/github-script@v7
        with:
          script: |
            // Add verification label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['✅ auto-processed']
            });

            // Add success comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `🎉 **Submission Processed Successfully!**
              
              Your Day ${{ steps.extract.outputs.day_number }} submission has been automatically processed and added to your progress file:
              
              📄 **Your Progress File:** [submissions/participants/${{ steps.extract.outputs.username }}.md](https://github.com/${{ github.repository }}/blob/main/submissions/participants/${{ steps.extract.outputs.username }}.md)
              
              🏆 **Leaderboard:** [submissions/leaderboard.md](https://github.com/${{ github.repository }}/blob/main/submissions/leaderboard.md)
              
              Keep up the great work and climb the leaderboard! 🚀`
            });

      - name: Close issue with accepted label
        uses: actions/github-script@v7
        with:
          script: |
            // Add accepted label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['accepted']
            });

            // Close the issue
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              state: 'closed'
            });
